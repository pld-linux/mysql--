diff -Nur mysql++-1.7.9.orig/examples/cgi_image.cc mysql++-1.7.9/examples/cgi_image.cc
--- mysql++-1.7.9.orig/examples/cgi_image.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/examples/cgi_image.cc	Sun Sep 15 13:30:08 2002
@@ -1,5 +1,7 @@
 #include <sqlplus.hh>
 
+using namespace std;
+
 #define MY_DATABASE	"telcent"
 #define MY_TABLE		"fax"
 #define MY_HOST    "localhost"
diff -Nur mysql++-1.7.9.orig/examples/complic1.cc mysql++-1.7.9/examples/complic1.cc
--- mysql++-1.7.9.orig/examples/complic1.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/complic1.cc	Sun Sep 15 13:30:16 2002
@@ -3,6 +3,8 @@
 #include <iomanip>
 #include <sqlplus.hh>
 
+using namespace std;
+
 int main() {
   try { // its in one big try block
 
diff -Nur mysql++-1.7.9.orig/examples/custom1.cc mysql++-1.7.9/examples/custom1.cc
--- mysql++-1.7.9.orig/examples/custom1.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/custom1.cc	Sun Sep 15 13:29:08 2002
@@ -5,6 +5,8 @@
 #include <sqlplus.hh>
 #include <custom.hh>
 
+using namespace std;
+
 sql_create_5 (stock,		// struct name, 
 	      1, 5,		// I'll explain these latter
 	      string, item,	// type, id
diff -Nur mysql++-1.7.9.orig/examples/custom2.cc mysql++-1.7.9/examples/custom2.cc
--- mysql++-1.7.9.orig/examples/custom2.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/custom2.cc	Sun Sep 15 13:29:08 2002
@@ -6,6 +6,8 @@
 #include "util.hh"
 // util.hh/cc contains the print_stock_table function
 
+using namespace std;
+
 sql_create_5(stock, 1, 5, string, item, longlong, num, 
 	     double, weight, double, price, Date, sdate)
 
diff -Nur mysql++-1.7.9.orig/examples/custom3.cc mysql++-1.7.9/examples/custom3.cc
--- mysql++-1.7.9.orig/examples/custom3.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/custom3.cc	Sun Sep 15 13:29:39 2002
@@ -6,6 +6,8 @@
 #include "util.hh"
 // util.hh/cc contains the print_stock_table function
 
+using namespace std;
+
 sql_create_5(stock, 1, 5, string, item, longlong, num, 
 	     double, weight, double, price, Date, sdate)
 
diff -Nur mysql++-1.7.9.orig/examples/custom4.cc mysql++-1.7.9/examples/custom4.cc
--- mysql++-1.7.9.orig/examples/custom4.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/custom4.cc	Sun Sep 15 13:29:50 2002
@@ -5,6 +5,8 @@
 #include <sqlplus.hh>
 #include <custom.hh>
 
+using namespace std;
+
 sql_create_5(stock, 
 	     1, // This number is used to make a SSQLS less-than-comparable.
 	        // If this number is n then if the first n elements are the 
diff -Nur mysql++-1.7.9.orig/examples/fieldinf1.cc mysql++-1.7.9/examples/fieldinf1.cc
--- mysql++-1.7.9.orig/examples/fieldinf1.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/fieldinf1.cc	Sun Sep 15 13:30:28 2002
@@ -3,6 +3,8 @@
 #include <iomanip>
 #include <sqlplus.hh>
 
+using namespace std;
+
 int main() {
   try { // its in one big try block
 
diff -Nur mysql++-1.7.9.orig/examples/load_file.cc mysql++-1.7.9/examples/load_file.cc
--- mysql++-1.7.9.orig/examples/load_file.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/load_file.cc	Sun Sep 15 13:30:39 2002
@@ -1,6 +1,9 @@
 #include <sys/stat.h>
 #include <fstream>
 #include <mysql++>
+
+using namespace std;
+
 extern int errno;
 const char  MY_DATABASE[]="telcent";
 const char  MY_TABLE[]="fax";
diff -Nur mysql++-1.7.9.orig/examples/populate.cc mysql++-1.7.9/examples/populate.cc
--- mysql++-1.7.9.orig/examples/populate.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/populate.cc	Sun Sep 15 13:30:53 2002
@@ -1,10 +1,12 @@
 #include <vector>
 #include <string>
-vector<string> yy;
+std::vector<std::string> yy;
 #include <iostream>
 #include <iomanip>
 #include <mysql++>
 
+using namespace std;
+
 int main() {
   Connection con(use_exceptions);
 	try {
diff -Nur mysql++-1.7.9.orig/examples/resetdb.cc mysql++-1.7.9/examples/resetdb.cc
--- mysql++-1.7.9.orig/examples/resetdb.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/resetdb.cc	Sun Sep 15 13:29:08 2002
@@ -2,6 +2,8 @@
 #include <iostream>
 #include <sqlplus.hh>
 
+using namespace std;
+
 int main (int argc, char *argv[]) {
   Connection connection(use_exceptions);
   try { // the entire main block is one big try block;
diff -Nur mysql++-1.7.9.orig/examples/simple1.cc mysql++-1.7.9/examples/simple1.cc
--- mysql++-1.7.9.orig/examples/simple1.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/simple1.cc	Sun Sep 15 13:29:08 2002
@@ -2,6 +2,8 @@
 #include <iomanip>
 #include <sqlplus.hh>
 
+using namespace std;
+
 int main() {
   // The full format for the Connection constructor is
   // Connection(cchar *db, cchar *host="", 
diff -Nur mysql++-1.7.9.orig/examples/sinisa_ex.cc mysql++-1.7.9/examples/sinisa_ex.cc
--- mysql++-1.7.9.orig/examples/sinisa_ex.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/examples/sinisa_ex.cc	Sun Sep 15 13:31:10 2002
@@ -1,10 +1,12 @@
 #include <vector>
 #include <string>
-vector<string> yy;
+std::vector<std::string> yy;
 #include <iostream>
 #include <iomanip>
 #include <sqlplus.hh>
 
+using namespace std;
+
 int main() {
   Connection con(use_exceptions);
 	try {
diff -Nur mysql++-1.7.9.orig/examples/updel_x_.cc mysql++-1.7.9/examples/updel_x_.cc
--- mysql++-1.7.9.orig/examples/updel_x_.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/examples/updel_x_.cc	Sun Sep 15 13:31:17 2002
@@ -1,5 +1,7 @@
 #include <sqlplus.hh>
 
+using namespace std;
+
 #define MY_DATABASE	"telcent"
 #define MY_TABLE		"nazivi"
 #define MY_HOST    "localhost"
diff -Nur mysql++-1.7.9.orig/examples/util.cc mysql++-1.7.9/examples/util.cc
--- mysql++-1.7.9.orig/examples/util.cc	Sat May 19 18:44:47 2001
+++ mysql++-1.7.9/examples/util.cc	Sun Sep 15 13:29:08 2002
@@ -2,6 +2,8 @@
 #include <iomanip>
 #include "util.hh"
 
+using namespace std;
+
 void print_stock_table(Query& query) {
   query.reset();
   query << "select * from stock";
diff -Nur mysql++-1.7.9.orig/sqlplusint/coldata.cc mysql++-1.7.9/sqlplusint/coldata.cc
--- mysql++-1.7.9.orig/sqlplusint/coldata.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/coldata.cc	Sun Sep 15 13:29:08 2002
@@ -2,5 +2,5 @@
 #include "const_string3.hh"
 #include "coldata4.hh"
 
-template class mysql_ColData<string>;
+template class mysql_ColData<std::string>;
 template class mysql_ColData<const_string>;
diff -Nur mysql++-1.7.9.orig/sqlplusint/coldata1.hh mysql++-1.7.9/sqlplusint/coldata1.hh
--- mysql++-1.7.9.orig/sqlplusint/coldata1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/coldata1.hh	Sun Sep 15 13:29:08 2002
@@ -40,14 +40,14 @@
 class mysql_ColData : public Str {
 private:
   mysql_type_info _type;
-	string buf;
+	std::string buf;
 	bool _null;
 public:
   mysql_ColData (bool n, mysql_type_info t = mysql_type_info::string_type) 
     : _type(t), _null(n) {}
   mysql_ColData (const char *str, 
 		 mysql_type_info t = mysql_type_info::string_type, bool n = false)
-    : Str(str), _type(t), _null(n) {buf=(string)str;}
+    : Str(str), _type(t), _null(n) {buf=(std::string)str;}
   mysql_ColData () {}
   mysql_type_info type() {return _type;}
   //: Returns the current mysql type of current item
@@ -72,7 +72,7 @@
   // (Note, This is not an actual template)
   void it_is_null (void) {_null=true;}
 	inline const bool is_null(void) const {return _null;}
-	inline const string&  get_string(void) const {return buf;}
+	inline const std::string&  get_string(void) const {return buf;}
   operator cchar*() const {return buf.c_str();}
   operator  signed char() const {return conv((signed char)0);}
   operator  unsigned char() const {return conv((unsigned char)0);}
@@ -95,7 +95,7 @@
 //: The Type that is returned by constant rows
 typedef mysql_ColData<const_string> ColData;
 //: The Type that is returned by mutable rows
-typedef mysql_ColData<string>       MutableColData;
+typedef mysql_ColData<std::string>  MutableColData;
 //: For backwards compatibility. Do not use.
 typedef ColData MysqlString;
 //: For backwards compatibility. Do not use.
diff -Nur mysql++-1.7.9.orig/sqlplusint/coldata4.hh mysql++-1.7.9/sqlplusint/coldata4.hh
--- mysql++-1.7.9.orig/sqlplusint/coldata4.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/coldata4.hh	Sun Sep 15 13:29:08 2002
@@ -9,7 +9,7 @@
 
 template <class Str> template<class Type> 
 Type mysql_ColData<Str>::conv (Type dummy) const {
-	string strbuf(buf);
+	std::string strbuf(buf);
 	strip_all_blanks(strbuf);
   size_t len = strbuf.size();
   const char *str = strbuf.c_str();
diff -Nur mysql++-1.7.9.orig/sqlplusint/compare1.hh mysql++-1.7.9/sqlplusint/compare1.hh
--- mysql++-1.7.9.orig/sqlplusint/compare1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/compare1.hh	Sun Sep 15 13:29:08 2002
@@ -1,11 +1,11 @@
 #ifndef __compare1_hh__
 #define __compare1_hh__
 
-#include <function.h>
+#include <functional>
 #include "row1.hh"
 
 template <class BinaryPred, class CmpType>
-class MysqlCmp : public unary_function<const MysqlRow&, bool>
+class MysqlCmp : public std::unary_function<const MysqlRow&, bool>
 {
 protected:
   unsigned int index;
@@ -36,7 +36,7 @@
   return MysqlCmp<BinaryPred, CmpType>(i, func, cmp2);
 }
 
-typedef binary_function<const char*, const char*, bool> bin_char_pred;
+typedef std::binary_function<const char*, const char*, bool> bin_char_pred;
 
 struct cstr_equal_to : bin_char_pred {
   bool operator () (const char *x, const char *y) const
diff -Nur mysql++-1.7.9.orig/sqlplusint/connection.cc mysql++-1.7.9/sqlplusint/connection.cc
--- mysql++-1.7.9.orig/sqlplusint/connection.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/connection.cc	Sun Sep 15 13:29:08 2002
@@ -2,6 +2,8 @@
 #include "connection3.hh"
 #include "result3.hh"
 
+using namespace std;
+
 Connection::Connection (const char *db, const char *host, const char *user, 
 			const char *passwd, bool te) 
   : throw_exceptions(te), locked(false)
@@ -20,9 +22,9 @@
 }
 
 Connection::Connection (const char *db, const char *host, const char *user, 
-			const char *passwd, uint port, my_bool compress = 0,
-			unsigned int connect_timeout = 60, bool te = true,
-			const char *socket_name = "", unsigned client_flag = 0)
+			const char *passwd, uint port, my_bool compress /* = 0 */,
+			unsigned int connect_timeout /* = 60 */, bool te /* = true */,
+			const char *socket_name /* = "" */, unsigned client_flag /* = 0 */)
   : throw_exceptions(te), locked(false)
 {
 	mysql_init(&mysql);
@@ -39,9 +41,9 @@
 }
 
 bool Connection::real_connect (cchar *db, cchar *host, cchar *user,
-			       cchar *passwd, uint port, my_bool compress = 0,
-			       unsigned int connect_timeout = 60,
-			       const char *socket_name = "", unsigned int client_flag = 0)
+			       cchar *passwd, uint port, my_bool compress /* = 0 */,
+			       unsigned int connect_timeout /* = 60 */,
+			       const char *socket_name /* = "" */, unsigned int client_flag /* = 0 */)
 {
   mysql.options.compress = compress;
   mysql.options.connect_timeout=connect_timeout;
diff -Nur mysql++-1.7.9.orig/sqlplusint/connection1.hh mysql++-1.7.9/sqlplusint/connection1.hh
--- mysql++-1.7.9.orig/sqlplusint/connection1.hh	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/connection1.hh	Sun Sep 15 13:29:08 2002
@@ -8,13 +8,12 @@
 #define errno WSAGetLastError()
 #endif
 #include <mysql.h>
-#include <vector.h>
-#include <deque.h>
-#include <list.h>
-#include <slist.h>
-#include <set.h>
-#include <map.h>
-#include <multiset.h>
+#include <vector>
+#include <deque>
+#include <list>
+#include <ext/slist>
+#include <set>
+#include <map>
 #include "define_short"
 #include "exceptions.hh"
 #include "query1.hh"
@@ -22,9 +21,9 @@
 
 //: The main database handle
 class Connection {
-  friend ResNSel;
-  friend ResUse;
-  friend Query;
+  friend class ResNSel;
+  friend class ResUse;
+  friend class Query;
   
 private:
   bool throw_exceptions;
@@ -52,7 +51,7 @@
 				
   ~Connection (); //:
   void         close() {mysql_close(&mysql);}	 //:
-  string       info ();	//:
+  std::string  info ();	//:
 
   bool   connected() const {return is_connected;}
   //: returns true if a successful connection was made
@@ -74,59 +73,59 @@
   //:
 
   operator bool () {return success();}                  //: returns success()
-  string error () {return string(mysql_error(&mysql));} //: last error message()
+  std::string error () {return std::string(mysql_error(&mysql));} //: last error message()
 	int errnum () {return mysql_errno(&mysql);}
 	int   refresh (unsigned int refresh_options){ return mysql_refresh (&mysql,refresh_options); }
 	int ping (void) { return mysql_ping(&mysql);}
 	int kill (unsigned long pid) { return mysql_kill (&mysql,pid);}
-  string client_info () {return string(mysql_get_client_info());} //:
+  std::string client_info () {return std::string(mysql_get_client_info());} //:
   
-  string host_info () {return string(mysql_get_host_info(&mysql));} //:
+  std::string host_info () {return std::string(mysql_get_host_info(&mysql));} //:
   
   int    proto_info () {return mysql_get_proto_info(&mysql);} //:
   
-  string server_info () {return string(mysql_get_server_info(&mysql));} //:
+  std::string server_info () {return std::string(mysql_get_server_info(&mysql));} //:
  
-  string stat() {return string(mysql_stat(&mysql));} //:
+  std::string stat() {return std::string(mysql_stat(&mysql));} //:
  
-  Result  store(const string &str) {return store(str, throw_exceptions);} //:
-  ResUse  use(const string &str)   {return use(str, throw_exceptions);} //:
-  ResNSel execute(const string &str) {return execute(str, throw_exceptions);} //:
-	bool exec (const string &str);
-  Result  store(const string &str, bool te); //:
-  ResUse  use(const string &str, bool te); //:
-  ResNSel execute(const string &str, bool te); //:
+  Result  store(const std::string &str) {return store(str, throw_exceptions);} //:
+  ResUse  use(const std::string &str)   {return use(str, throw_exceptions);} //:
+  ResNSel execute(const std::string &str) {return execute(str, throw_exceptions);} //:
+	bool exec (const std::string &str);
+  Result  store(const std::string &str, bool te); //:
+  ResUse  use(const std::string &str, bool te); //:
+  ResNSel execute(const std::string &str, bool te); //:
  
-  bool   create_db (string db) {return !(execute( "CREATE DATABASE " + db ));} //:
-  bool   drop_db (string db) {return !(execute( "DROP DATABASE " + db ));} //:
-  bool   select_db (string db) {return select_db(db.c_str());} //:
+  bool   create_db (std::string db) {return !(execute( "CREATE DATABASE " + db ));} //:
+  bool   drop_db (std::string db) {return !(execute( "DROP DATABASE " + db ));} //:
+  bool   select_db (std::string db) {return select_db(db.c_str());} //:
   bool   select_db (const char *db); //:
   bool   reload(); //:
   bool   shutdown (); //:
-	string infoo (void) {return info ();}
+	std::string infoo (void) {return info ();}
 	st_mysql_options get_options (void) const {return mysql.options;}
 	int read_options(enum mysql_option option,const char *arg) {return  mysql_options(&mysql, option,arg);}
   int          affected_rows()  {return mysql_affected_rows((MYSQL*) &mysql);}
   int          insert_id () {return mysql_insert_id(&mysql);}
 
-  template <class Sequence> void storein_sequence(Sequence &, const string &); //:
-  template <class Set>      void storein_set(Set &, const string &);  //:
+  template <class Sequence> void storein_sequence(Sequence &, const std::string &); //:
+  template <class Set>      void storein_set(Set &, const std::string &);  //:
 
   //!dummy: void storein(TYPE &con, const string &s);
   //: Stores the results in TYPE.  
   // Stores the result in TYPE. TYPE must be some sort of STL container.  
 
-  template <class T>        void storein(vector<T> &con, const string &s)
+  template <class T>        void storein(std::vector<T> &con, const std::string &s)
     {storein_sequence(con,s);}
-  template <class T>        void storein(deque<T> &con, const string &s)
+  template <class T>        void storein(std::deque<T> &con, const std::string &s)
      {storein_sequence(con,s);}
-  template <class T>        void storein(list<T> &con, const string &s)
+  template <class T>        void storein(std::list<T> &con, const std::string &s)
     {storein_sequence(con,s);}
-  template <class T>        void storein(slist<T> &con, const string &s)
+  template <class T>        void storein(__gnu_cxx::slist<T> &con, const std::string &s)
     {storein_sequence(con,s);}
-  template <class T>        void storein(set<T> &con, const string &s)
+  template <class T>        void storein(std::set<T> &con, const std::string &s)
     {storein_set(con,s);}
-  template <class T>        void storein(multiset<T> &con, const string &s)
+  template <class T>        void storein(std::multiset<T> &con, const std::string &s)
     {storein_set(con,s);}
 };
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/connection2.hh mysql++-1.7.9/sqlplusint/connection2.hh
--- mysql++-1.7.9.orig/sqlplusint/connection2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/connection2.hh	Sun Sep 15 13:29:08 2002
@@ -7,7 +7,7 @@
 inline Query Connection::query() {return Query(this, throw_exceptions);}
 
 template <class Sequence>
-void Connection::storein_sequence (Sequence &seq, const string &str) {
+void Connection::storein_sequence (Sequence &seq, const std::string &str) {
   ResUse result = use(str);
   while (1) {
 	  MYSQL_ROW d = mysql_fetch_row(result.mysql_res);
@@ -19,7 +19,7 @@
 }
 
 template <class Set>
-void Connection::storein_set (Set &sett, const string &str) {
+void Connection::storein_set (Set &sett, const std::string &str) {
   ResUse result = use(str);
 	while (1) {
 	  MYSQL_ROW d = mysql_fetch_row(result.mysql_res);	
diff -Nur mysql++-1.7.9.orig/sqlplusint/const_string1.hh mysql++-1.7.9/sqlplusint/const_string1.hh
--- mysql++-1.7.9.orig/sqlplusint/const_string1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/const_string1.hh	Sun Sep 15 13:29:08 2002
@@ -47,7 +47,7 @@
   const_reference operator[](size_type pos) const {return str_data[pos];} //:
   const_reference at(size_type pos) const //: 
   {
-    if (pos >= size()) throw out_of_range("");
+    if (pos >= size()) throw std::out_of_range("");
     else return str_data[pos];
   }
   
@@ -67,7 +67,7 @@
 //! with_class = const_string
 
 //:
-inline ostream& operator << (ostream &o, const const_string &str) {
+inline std::ostream& operator << (std::ostream &o, const const_string &str) {
   return o << str.c_str();
 }
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/custom.hh mysql++-1.7.9/sqlplusint/custom.hh
--- mysql++-1.7.9.orig/sqlplusint/custom.hh	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/custom.hh	Sun Sep 15 13:29:08 2002
@@ -8,7 +8,7 @@
 enum sql_dummy_type {sql_dummy};
 enum sql_cmp_type {sql_use_compare};
 
-inline int sql_cmp(const string &a, const string &b) {
+inline int sql_cmp(const std::string &a, const std::string &b) {
   return a.compare(b);
 }
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/custom.pl mysql++-1.7.9/sqlplusint/custom.pl
--- mysql++-1.7.9.orig/sqlplusint/custom.pl	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/custom.pl	Sun Sep 15 13:29:08 2002
@@ -13,7 +13,7 @@
 enum sql_dummy_type {sql_dummy};
 enum sql_cmp_type {sql_use_compare};
 
-inline int sql_cmp(const string &a, const string &b) {
+inline int sql_cmp(const std::string &a, const std::string &b) {
   return a.compare(b);
 }
 ---
@@ -80,21 +80,21 @@
 
 #define sql_compare_define(NAME) \\
     bool operator == (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) == 0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) == 0;} \\
     bool operator != (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) != 0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) != 0;} \\
     bool operator > (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) >  0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) >  0;} \\
     bool operator < (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) <  0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) <  0;} \\
     bool operator >= (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) >= 0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) >= 0;} \\
     bool operator <= (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other) <= 0;} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other) <= 0;} \\
     int cmp (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other);} \\
+      {return sql_compare_##NAME<sql_dummy>(*this,other);} \\
     int compare (const NAME &other) const \\
-      {return sql_compare_##NAME##<sql_dummy>(*this,other);}
+      {return sql_compare_##NAME<sql_dummy>(*this,other);}
 ---
 
 foreach $j (1..26) {
@@ -128,9 +128,9 @@
   $compr = "    int cmp; \\\n" unless $i == 1;
   $compp = "";
   foreach $j (1..$i) {
-      $compr .= "    if (cmp = sql_cmp(x.##C$j , y.##C$j )) return cmp; \\\n"
+      $compr .= "    if (cmp = sql_cmp(x.C$j , y.C$j )) return cmp; \\\n"
                                                               unless $j == $i;
-      $compr .= "    return sql_cmp(x.##C$j , y.##C$j );"   if $j == $i;
+      $compr .= "    return sql_cmp(x.C$j , y.C$j );"   if $j == $i;
       $parm2 .= "const T$j &p$j";
       $parm2 .= ", "  unless $j == $i;
       $define.= "C$j (p$j)";
@@ -219,7 +219,7 @@
 	$parm_simple2c_b .= ", " unless $j == $i;
 	$defs  .= "    T$j I$j;";
 	$defs  .= "\n" unless $j == $i;
-	$popul .= "    s->##I$j = row[ O$j ];";
+	$popul .= "    s->I$j = row[ O$j ];";
 	$popul .= "\n" unless $j == $i;
         $names .= "    N$j ";
 	$names .= ",\n" unless $j == $i;
@@ -227,7 +227,7 @@
 	$enums .= ",\n" unless $j == $i;
         $field_list .= "    s << obj.manip << obj.obj->names[".($j-1)."]";
 	$field_list .= " << obj.delem;\n" unless $j == $i;
-	$value_list .= "    s << obj.manip << obj.obj->##I$j";
+	$value_list .= "    s << obj.manip << obj.obj->I$j";
 	$value_list .= " << obj.delem;\n" unless $j == $i;
         $create_bool .= "    if (i$j) (*include)[".($j-1)."]=true;\n";
         $create_list .= "    if (i$j == NAME##_NULL) return;\n" unless $i == 1;
@@ -235,7 +235,7 @@
 
         $value_list_cus .= "    if ((*obj.include)[".($j-1)."]) { \n";
 	$value_list_cus .= "      if (before) s << obj.delem;\n" unless $j == 1;
-        $value_list_cus .= "      s << obj.manip << obj.obj->##I$j;\n";
+        $value_list_cus .= "      s << obj.manip << obj.obj->I$j;\n";
 	$value_list_cus .= "      before = true; \n" unless $j == $i;
 	$value_list_cus .= "     } \n";
 
@@ -248,22 +248,22 @@
         $cus_equal_list .= "    if ((*obj.include)[".($j-1)."]) { \n";
 	$cus_equal_list .= "      if (before) s << obj.delem;\n" unless $j == 1;
         $cus_equal_list .= "      s << obj.obj->names[".($j-1)."] << obj.comp";
-        $cus_equal_list .=        " << obj.manip << obj.obj->##I$j;\n";
+        $cus_equal_list .=        " << obj.manip << obj.obj->I$j;\n";
 	$cus_equal_list .= "      before = true; \n" unless $j == $i;
 	$cus_equal_list .= "     } \n";
 
         $equal_list .= "    s << obj.obj->names[".($j-1)."] << obj.comp";
-        $equal_list .= " << obj.manip << obj.obj->##I$j";
+        $equal_list .= " << obj.manip << obj.obj->I$j";
 	$equal_list .= " << obj.delem;\n" unless $j == $i;
         $cusparms1  .= "bool i$j"         if     $j == 1;
 	$cusparms1  .= "bool i$j = false" unless $j == 1;
 	$cusparms1  .= ", " unless $j == $i;
         $cusparms11  .= "bool i$j" ;
 	$cusparms11  .= ", " unless $j == $i;
-	$cusparms2  .= "##NAME##_enum i$j" if $j == 1;
-	$cusparms2  .= "##NAME##_enum i$j = ##NAME##_NULL" unless $j == 1;
+	$cusparms2  .= "NAME##_enum i$j" if $j == 1;
+	$cusparms2  .= "NAME##_enum i$j = NAME##_NULL" unless $j == 1;
 	$cusparms2  .= ", " unless $j == $i;
-	$cusparms22  .= "##NAME##_enum i$j";
+	$cusparms22  .= "NAME##_enum i$j";
 	$cusparms22  .= ", " unless $j == $i;
         $cusparmsv  .= "i$j";
 	$cusparmsv  .= ", " unless $j == $i;
@@ -303,10 +303,10 @@
 $popul 
   } 
 
-  inline NAME##::##NAME (const MysqlRow &row) 
-    {populate_##NAME##<sql_dummy>(this, row);} 
+  inline NAME::NAME (const MysqlRow &row) 
+    {populate_##NAME<sql_dummy>(this, row);} 
 
-  sql_COMPARE__##CMP##(NAME, $parmc )
+  sql_COMPARE__##CMP(NAME, $parmc )
 ---
     print OUT &prepare($out);
 
@@ -367,7 +367,7 @@
     vector<bool> *include;
     bool del_vector;
   public: 
-    ~##NAME##_cus_value_list () {if (del_vector) delete include;} 
+    ~NAME##_cus_value_list () {if (del_vector) delete include;} 
     NAME##_cus_value_list (const NAME *o, cchar *d, Manip m, $cusparms11);
     NAME##_cus_value_list (const NAME *o, cchar *d, Manip m, $cusparms22); 
     NAME##_cus_value_list (const NAME *o, cchar *d, Manip m ,vector<bool>)
@@ -385,7 +385,7 @@
     vector<bool> *include; 
     bool del_vector; 
   public: 
-    ~##NAME##_cus_field_list () {if (del_vector) delete include;} 
+    ~NAME##_cus_field_list () {if (del_vector) delete include;} 
     NAME##_cus_field_list (const NAME *o, cchar *d, Manip m, $cusparms11); 
     NAME##_cus_field_list (const NAME *o, cchar *d, Manip m, $cusparms22); 
     NAME##_cus_field_list (const NAME *o, cchar *d, Manip m, vector<bool> *i) 
@@ -404,7 +404,7 @@
     cchar *comp;
     Manip manip;
   public:
-    ~##NAME##_##cus_equal_list () {if (del_vector) delete include;}
+    ~NAME##_##cus_equal_list () {if (del_vector) delete include;}
     NAME##_##cus_equal_list (const NAME *o, cchar *d, cchar *c, Manip m, $cusparms11); 
     NAME##_##cus_equal_list (const NAME *o, cchar *d, cchar *c, Manip m, $cusparms22); 
     NAME##_##cus_equal_list (const NAME *o, cchar *d, cchar *c, Manip m, vector<bool> *i) 
@@ -593,10 +593,10 @@
 					    sql_cmp_type sc) const;
   }; 
 
-  char *##NAME##::names[] = { 
+  char *NAME::names[] = { 
 $names 
   }; 
-  char *##NAME##::_table = #NAME ;  
+  char *NAME::_table = #NAME ;  
 
   template <class Manip>
   NAME##_cus_value_list<Manip>::NAME##_cus_value_list
@@ -668,110 +668,110 @@
   }
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_value_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_value_list<Manip>& obj) { 
 $value_list; 
     return s; 
   } 
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_field_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_field_list<Manip>& obj) { 
 $field_list; 
     return s; 
   } 
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_equal_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_equal_list<Manip>& obj) { 
 $equal_list; 
     return s; 
   } 
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_cus_value_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_cus_value_list<Manip>& obj) { 
     bool before = false; 
 $value_list_cus 
     return s; 
   } 
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_cus_field_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_cus_field_list<Manip>& obj) { 
     bool before = false; 
 $cus_field_list 
     return s; 
   } 
 
   template <class Manip>
-  ostream& operator << (ostream& s, const NAME##_cus_equal_list<Manip>& obj) { 
+  std::ostream& operator << (std::ostream& s, const NAME##_cus_equal_list<Manip>& obj) { 
     bool before = false; 
 $cus_equal_list 
     return s; 
   } 
 
   template <class Manip>
-  inline NAME##_value_list<Manip> NAME##::value_list(cchar *d, Manip m) const { 
+  inline NAME##_value_list<Manip> NAME::value_list(cchar *d, Manip m) const { 
     return NAME##_value_list<Manip> (this, d, m); 
   } 
 
   template <class Manip>
-  inline NAME##_field_list<Manip> NAME##::field_list(cchar *d, Manip m) const { 
+  inline NAME##_field_list<Manip> NAME::field_list(cchar *d, Manip m) const { 
     return NAME##_field_list<Manip> (this, d, m); 
   } 
 
   template <class Manip>
-  inline NAME##_equal_list<Manip> NAME##::equal_list(cchar *d, cchar *c, Manip m) const { 
+  inline NAME##_equal_list<Manip> NAME::equal_list(cchar *d, cchar *c, Manip m) const { 
     return NAME##_equal_list<Manip> (this, d, c, m); 
   } 
  
   template <class Manip>
-  inline NAME##_cus_value_list<Manip> NAME##::value_list(cchar *d, Manip m,
+  inline NAME##_cus_value_list<Manip> NAME::value_list(cchar *d, Manip m,
 						       $cusparms11) const {
     return NAME##_cus_value_list<Manip> (this, d, m, $cusparmsv); 
   } 
 
   template <class Manip>
-  inline NAME##_cus_field_list<Manip> NAME##::field_list(cchar *d, Manip m,
+  inline NAME##_cus_field_list<Manip> NAME::field_list(cchar *d, Manip m,
 							 $cusparms11) const { 
     return NAME##_cus_field_list<Manip> (this, d, m, $cusparmsv); 
   } 
 
   template <class Manip>
-  inline NAME##_cus_equal_list<Manip> NAME##::equal_list(cchar *d, cchar *c, Manip m,
+  inline NAME##_cus_equal_list<Manip> NAME::equal_list(cchar *d, cchar *c, Manip m,
 							 $cusparms11) const { 
     return NAME##_cus_equal_list<Manip> (this, d, c, m, $cusparmsv); 
   } 
 
   template <class Manip>
-  inline NAME##_cus_value_list<Manip> NAME##::value_list(cchar *d, Manip m,
+  inline NAME##_cus_value_list<Manip> NAME::value_list(cchar *d, Manip m,
 						       $cusparms22) const { 
     return NAME##_cus_value_list<Manip> (this, d, m, $cusparmsv); 
   } 
 
   template <class Manip>
-  inline NAME##_cus_field_list<Manip> NAME##::field_list(cchar *d, Manip m,
+  inline NAME##_cus_field_list<Manip> NAME::field_list(cchar *d, Manip m,
 							 $cusparms22) const {
     return NAME##_cus_field_list<Manip> (this, d, m, $cusparmsv); 
   } 
 
   template <class Manip>
-  inline NAME##_cus_equal_list<Manip> NAME##::equal_list(cchar *d, cchar *c, Manip m, 
+  inline NAME##_cus_equal_list<Manip> NAME::equal_list(cchar *d, cchar *c, Manip m, 
 							 $cusparms22) const { 
     return NAME##_cus_equal_list<Manip> (this, d, c, m, $cusparmsv); 
   } 
 
   template <class Manip>
   inline NAME##_cus_value_list<Manip> 
-  NAME##::value_list(cchar *d, Manip m, sql_cmp_type sc) const {
+  NAME::value_list(cchar *d, Manip m, sql_cmp_type sc) const {
     sql_compare_type_def_##CMP (NAME, value, NUM);
   }
 
   template <class Manip>
   inline NAME##_cus_field_list<Manip> 
-  NAME##::field_list(cchar *d, Manip m, sql_cmp_type sc) const {
+  NAME::field_list(cchar *d, Manip m, sql_cmp_type sc) const {
     sql_compare_type_def_##CMP (NAME, field, NUM);
   }
 
   template <class Manip>
   inline NAME##_cus_equal_list<Manip> 
-  NAME##::equal_list(cchar *d, cchar *c, Manip m, sql_cmp_type sc) const {
+  NAME::equal_list(cchar *d, cchar *c, Manip m, sql_cmp_type sc) const {
     sql_compare_type_defe_##CMP (NAME, equal, NUM);
   }
 
@@ -780,12 +780,12 @@
 $popul
   } 
 
-  inline NAME##::##NAME (const MysqlRow &row) 
-                                        {populate_##NAME##<sql_dummy>(this, row);}
-  inline void NAME##::set (const MysqlRow &row)
-                                        {populate_##NAME##<sql_dummy>(this, row);}
+  inline NAME::NAME (const MysqlRow &row) 
+                                        {populate_##NAME<sql_dummy>(this, row);}
+  inline void NAME::set (const MysqlRow &row)
+                                        {populate_##NAME<sql_dummy>(this, row);}
 
-  sql_COMPARE__##CMP##(NAME, $parmc )
+  sql_COMPARE__##CMP(NAME, $parmc )
 ---
 print OUT &prepare($out);
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/datetime.cc mysql++-1.7.9/sqlplusint/datetime.cc
--- mysql++-1.7.9.orig/sqlplusint/datetime.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/datetime.cc	Sun Sep 15 13:29:08 2002
@@ -7,7 +7,9 @@
 #endif
 
 #include "datetime3.hh"
-#include <iomanip.h>
+#include <iomanip>
+
+using namespace std;
 
 ostream& mysql_date::out_stream (ostream& s) const {
   char fill = s.fill('0');
diff -Nur mysql++-1.7.9.orig/sqlplusint/datetime1.hh mysql++-1.7.9/sqlplusint/datetime1.hh
--- mysql++-1.7.9.orig/sqlplusint/datetime1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/datetime1.hh	Sun Sep 15 13:29:08 2002
@@ -9,8 +9,8 @@
 #define __datetime1_hh__
 
 #include <string>
-#include <strstream.h>
-#include <iostream.h>
+#include <strstream>
+#include <iostream>
 #include "defs"
 #include "define_short"
 #include "coldata1.hh"
@@ -18,9 +18,9 @@
 #include "tiny_int1.hh"
 
 struct mysql_dt_base {
-  virtual ostream& out_stream(ostream&) const = 0;
+  virtual std::ostream& out_stream(std::ostream&) const = 0;
 
-  operator string ();
+  operator std::string ();
 };
 
 template <class T>
@@ -40,7 +40,7 @@
   tiny_int  month;
   tiny_int  day;
 
-  ostream& out_stream(ostream&) const;
+  std::ostream& out_stream(std::ostream&) const;
   cchar* convert (cchar*);
 protected:
   short int compare(const mysql_date *other) const;
@@ -71,13 +71,13 @@
   Date () {};
   Date (cchar* str) {convert(str);}
   Date (const ColData &str);
-  Date (const string &str);
+  Date (const std::string &str);
 
   short int compare(const Date& other) const 
     {return mysql_date::compare(&other);}
 };
 
-inline ostream& operator << (ostream& s, const Date& d) 
+inline std::ostream& operator << (std::ostream& s, const Date& d) 
                                                   {return d.out_stream(s);}
 
 struct mysql_time : virtual public mysql_dt_base {
@@ -85,7 +85,7 @@
   tiny_int minute;  
   tiny_int second;
 
-  ostream& out_stream(ostream&) const;
+  std::ostream& out_stream(std::ostream&) const;
   cchar* convert (cchar*);
 protected:
   short int compare(const mysql_time *other) const;
@@ -116,14 +116,14 @@
   Time () {};
   Time (cchar* str) {convert(str);}
   Time (const ColData &str);
-  Time (const string &str);
+  Time (const std::string &str);
 
   short int compare(const Time& other) const 
     {return mysql_time::compare(&other);}
 };
 
 
-inline ostream& operator << (ostream& s, const Time& d)
+inline std::ostream& operator << (std::ostream& s, const Time& d)
                                                  {return d.out_stream(s);}
 
 //: A combinate of Date and Time for holding mysql DateTime's
@@ -135,15 +135,15 @@
   DateTime () {}
   DateTime (cchar* str) {convert(str);}
   DateTime (const ColData &str);
-  DateTime (const string &str);
+  DateTime (const std::string &str);
 
   short int compare(const DateTime& other) const;
 
-  ostream& out_stream(ostream&) const;
+  std::ostream& out_stream(std::ostream&) const;
   cchar* convert (cchar*);
 };
 
-inline ostream& operator << (ostream& s, const DateTime& d)
+inline std::ostream& operator << (std::ostream& s, const DateTime& d)
                                                    {return d.out_stream(s);}
 
 #endif
diff -Nur mysql++-1.7.9.orig/sqlplusint/datetime2.hh mysql++-1.7.9/sqlplusint/datetime2.hh
--- mysql++-1.7.9.orig/sqlplusint/datetime2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/datetime2.hh	Sun Sep 15 13:29:08 2002
@@ -5,17 +5,17 @@
 #include "coldata2.hh"
 #include "stream2string2.hh"
 
-inline mysql_dt_base::operator string () {
-  return stream2string<string>(*this);
+inline mysql_dt_base::operator std::string () {
+  return stream2string<std::string>(*this);
 }
 
 inline Date::Date (const ColData &str) {convert(str.c_str());}
-inline Date::Date (const string &str)  {convert(str.c_str());}
+inline Date::Date (const std::string &str) {convert(str.c_str());}
 
 inline Time::Time (const ColData &str) {convert(str.c_str());}
-inline Time::Time (const string &str)  {convert(str.c_str());}
+inline Time::Time (const std::string &str){convert(str.c_str());}
 
 inline DateTime::DateTime (const ColData &str) {convert(str.c_str());}
-inline DateTime::DateTime (const string &str) {convert(str.c_str());}
+inline DateTime::DateTime (const std::string &str) {convert(str.c_str());}
 
 #endif
diff -Nur mysql++-1.7.9.orig/sqlplusint/exceptions.hh mysql++-1.7.9/sqlplusint/exceptions.hh
--- mysql++-1.7.9.orig/sqlplusint/exceptions.hh	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/exceptions.hh	Sun Sep 15 13:29:08 2002
@@ -62,15 +62,15 @@
 #else //origional, default exception style
 
 struct BadQuery {
-  BadQuery(string er) : error(er) {}
-  string error; //: The error message
+  BadQuery(std::string er) : error(er) {}
+  std::string error; //: The error message
 };
 
 
 //: Exception structure thrown when a bad conversion takes place
 struct BadConversion {
   const char*  type_name;  //:
-  const string data;       //:
+  const std::string data;  //:
   size_t       retrieved;  //:
   size_t       actual_size;//:
   BadConversion(const char* tn, const char* d, size_t r, size_t a) : type_name(tn), data(d), retrieved(r), actual_size(a) {};
diff -Nur mysql++-1.7.9.orig/sqlplusint/exceptions.hh.in mysql++-1.7.9/sqlplusint/exceptions.hh.in
--- mysql++-1.7.9.orig/sqlplusint/exceptions.hh.in	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/exceptions.hh.in	Sun Sep 15 13:29:08 2002
@@ -61,15 +61,15 @@
 #else //origional, default exception style
 
 struct BadQuery {
-  BadQuery(string er) : error(er) {}
-  string error; //: The error message
+  BadQuery(std::string er) : error(er) {}
+  std::string error; //: The error message
 };
 
 
 //: Exception structure thrown when a bad conversion takes place
 struct BadConversion {
   const char*  type_name;  //:
-  const string data;       //:
+  const std::string data;  //:
   size_t       retrieved;  //:
   size_t       actual_size;//:
   BadConversion(const char* tn, const char* d, size_t r, size_t a) : type_name(tn), data(d), retrieved(r), actual_size(a) {};
diff -Nur mysql++-1.7.9.orig/sqlplusint/field_names.cc mysql++-1.7.9/sqlplusint/field_names.cc
--- mysql++-1.7.9.orig/sqlplusint/field_names.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/field_names.cc	Sun Sep 15 13:29:08 2002
@@ -13,7 +13,7 @@
   int num = res->num_fields();
   reserve(num);
   for (int i = 0; i < num; i++) {
-		string p(res->fields()[i].name); str_to_lwr(p);   push_back(p);
+		std::string p(res->fields()[i].name); str_to_lwr(p);   push_back(p);
   }
 	
 }
diff -Nur mysql++-1.7.9.orig/sqlplusint/field_names1.hh mysql++-1.7.9/sqlplusint/field_names1.hh
--- mysql++-1.7.9.orig/sqlplusint/field_names1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/field_names1.hh	Sun Sep 15 13:29:08 2002
@@ -2,37 +2,37 @@
 #ifndef __field_names1_hh__
 #define __field_names1_hh__
 
-#include <vector.h>
-#include <algo.h>
+#include <vector>
+#include <ext/algorithm>
 #include "defs"
 #include "define_short"
 #include "coldata1.hh"
 #include "string_util.hh"
 
 //: A vector of the field names.
-class FieldNames : public vector<string> {
+class FieldNames : public std::vector<std::string> {
 private:
   void init (const ResUse *res);
 public:
   FieldNames () {}
   FieldNames (const ResUse *res) {init(res);}
-  FieldNames (int i) : vector<string>(i) {}
+  FieldNames (int i) : std::vector<std::string>(i) {}
 
   FieldNames& operator = (const ResUse *res) {init(res); return *this;}  
   //: Creates a new list from the data in res.
   FieldNames& operator = (int i) {insert(begin(), i, ""); return *this;} 
   //: Creates a new list with i field names.
   
-  string&  operator [] (int i) {return vector<string>::operator [] (i);}
+  std::string&  operator [] (int i) {return std::vector<std::string>::operator [] (i);}
   //: returns the field name of the field with that index number
 
-  const string&  operator [] (int i) const 
-    {return vector<string>::operator [] (i);}
+  const std::string&  operator [] (int i) const 
+    {return std::vector<std::string>::operator [] (i);}
   //: returns the field name of the field with that index number
 
-  uint     operator [] (string i) const
+  uint     operator [] (std::string i) const
   {
-	  string temp(i); str_to_lwr(temp);
+	  std::string temp(i); str_to_lwr(temp);
 	  return find(begin(),end(), temp) - begin();
 	}
   //: returns the index number of the field with that name
diff -Nur mysql++-1.7.9.orig/sqlplusint/field_types1.hh mysql++-1.7.9/sqlplusint/field_types1.hh
--- mysql++-1.7.9.orig/sqlplusint/field_types1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/field_types1.hh	Sun Sep 15 13:29:08 2002
@@ -1,19 +1,19 @@
 #ifndef __field_types1_hh__
 #define __field_types1_hh__
 
-#include <vector.h>
+#include <vector>
 #include "defs"
 #include "define_short"
 #include "type_info1.hh"
 
 //: A vector of the field types.
-class FieldTypes : public vector<mysql_type_info> {
+class FieldTypes : public std::vector<mysql_type_info> {
 private:
   void init (const ResUse *res);
 public:
   FieldTypes () {}
   FieldTypes (const ResUse *res) {init(res);}
-  FieldTypes (int i) : vector<mysql_type_info>(i) {}
+  FieldTypes (int i) : std::vector<mysql_type_info>(i) {}
 
   FieldTypes& operator = (const ResUse *res) {init(res); return *this;}
   //: Creates a new list based on the info in res
@@ -21,11 +21,11 @@
 					 mysql_type_info()); return *this;}
   //: Creates a new list with i fields. 
   
-  mysql_type_info&  operator [] (int i) {return vector<mysql_type_info>
+  mysql_type_info&  operator [] (int i) {return std::vector<mysql_type_info>
 				  ::operator [] (i);}
   //: Returns the field type for the field with an offset of i.
   const mysql_type_info&  operator [] (int i) const 
-    {return vector<mysql_type_info>::operator[] (i);}
+    {return std::vector<mysql_type_info>::operator[] (i);}
   //: Returns the field type for the field with an offset of i.
 };
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/manip.cc mysql++-1.7.9/sqlplusint/manip.cc
--- mysql++-1.7.9.orig/sqlplusint/manip.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/manip.cc	Sun Sep 15 13:29:08 2002
@@ -1,6 +1,8 @@
 
 #include "manip3.hh"
 
+using namespace std;
+
 // quote manipulator
 
 bool dont_quote_auto=false;
diff -Nur mysql++-1.7.9.orig/sqlplusint/manip1.hh mysql++-1.7.9/sqlplusint/manip1.hh
--- mysql++-1.7.9.orig/sqlplusint/manip1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/manip1.hh	Sun Sep 15 13:29:08 2002
@@ -24,11 +24,11 @@
 enum quote_type0 {mysql_quote};
 
 struct quote_type1 {
-  ostream *ostr;
-  quote_type1(ostream *o) : ostr(o) {}
+  std::ostream *ostr;
+  quote_type1(std::ostream *o) : ostr(o) {}
 }; 
 
-inline quote_type1 operator << (ostream &o, quote_type0 esc) {
+inline quote_type1 operator << (std::ostream &o, quote_type0 esc) {
   return quote_type1(&o);
 }
 
@@ -44,52 +44,55 @@
 SQLQueryParms& operator << (quote_type2 p, SQLString &in);
 
 template <class T>
-inline ostream& operator << (quote_type1 o, const T &in) {
+inline std::ostream& operator << (quote_type1 o, const T &in) {
   return *o.ostr << in;
 }
 
-ostream& operator << (ostream& o,const mysql_ColData<string>& in);
+std::ostream& operator << (std::ostream& o,const mysql_ColData<std::string>& in);
 
-ostream& operator << (ostream& o, const mysql_ColData<const_string>& in);
+std::ostream& operator << (std::ostream& o, const mysql_ColData<const_string>& in);
 
-SQLQuery& operator << (SQLQuery& o, const mysql_ColData<string>& in);
+SQLQuery& operator << (SQLQuery& o, const mysql_ColData<std::string>& in);
 
 SQLQuery& operator << (SQLQuery& o, const mysql_ColData<const_string>& in);
 
+inline SQLQuery& operator << (SQLQuery& o,const char* in)
+{ return o << (const mysql_ColData<const_string>&)in; }
+
 template <>
-ostream& operator << (quote_type1 o, const string &in);
+std::ostream& operator << (quote_type1 o, const std::string &in);
 
 template <>
-ostream& operator << (quote_type1 o, const char* const &in);
+std::ostream& operator << (quote_type1 o, const char* const &in);
 
 template <>
-ostream& operator << (quote_type1 o, const mysql_ColData<string>& in);
+std::ostream& operator << (quote_type1 o, const mysql_ColData<std::string>& in);
 
 template <>
-ostream& operator << (quote_type1 o, const mysql_ColData<const_string>& in);
+std::ostream& operator << (quote_type1 o, const mysql_ColData<const_string>& in);
 
 template <>
-inline ostream& operator << (quote_type1 o, char* const &in) {
+inline std::ostream& operator << (quote_type1 o, char* const &in) {
   return operator << (o, const_cast<const char* const &>(in));
 }
 
 template <>
-inline ostream& operator << (quote_type1 o, const Date &in) {
+inline std::ostream& operator << (quote_type1 o, const Date &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <>
-inline ostream& operator << (quote_type1 o, const Time &in) {
+inline std::ostream& operator << (quote_type1 o, const Time &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <>
-inline ostream& operator << (quote_type1 o, const DateTime &in) {
+inline std::ostream& operator << (quote_type1 o, const DateTime &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <class ST>
-inline ostream& operator << (quote_type1 o, const MysqlSet<ST> &in) {
+inline std::ostream& operator << (quote_type1 o, const MysqlSet<ST> &in) {
   return *o.ostr << "'" << in << "'";
 }
 
@@ -98,11 +101,11 @@
 enum quote_only_type0 {mysql_quote_only};
 
 struct quote_only_type1 {
-  ostream *ostr;
-  quote_only_type1(ostream *o) : ostr(o) {}
+  std::ostream *ostr;
+  quote_only_type1(std::ostream *o) : ostr(o) {}
 }; 
 
-inline quote_only_type1 operator << (ostream &o, quote_only_type0 esc) {
+inline quote_only_type1 operator << (std::ostream &o, quote_only_type0 esc) {
   return quote_only_type1(&o);
 }
 
@@ -118,38 +121,38 @@
 SQLQueryParms & operator << (quote_only_type2 p, SQLString &in);
 
 template <class T>
-inline ostream& operator << (quote_only_type1 o, const T &in) {
+inline std::ostream& operator << (quote_only_type1 o, const T &in) {
   return *o.ostr << in;
 }
 
 template <>
-inline ostream& operator << (quote_only_type1 o, const string &in) {
+inline std::ostream& operator << (quote_only_type1 o, const std::string &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <>
-ostream& operator << (quote_only_type1 o, const mysql_ColData<string>& in);
+std::ostream& operator << (quote_only_type1 o, const mysql_ColData<std::string>& in);
 
 template <>
-ostream& operator << (quote_only_type1 o, const mysql_ColData<const_string>& in);
+std::ostream& operator << (quote_only_type1 o, const mysql_ColData<const_string>& in);
 
 template <>
-inline ostream& operator << (quote_only_type1 o, const Date &in) {
+inline std::ostream& operator << (quote_only_type1 o, const Date &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <>
-inline ostream& operator << (quote_only_type1 o, const Time &in) {
+inline std::ostream& operator << (quote_only_type1 o, const Time &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <>
-inline ostream& operator << (quote_only_type1 o, const DateTime &in) {
+inline std::ostream& operator << (quote_only_type1 o, const DateTime &in) {
   return *o.ostr << "'" << in << "'";
 }
 
 template <class ST>
-inline ostream& operator << (quote_only_type1 o, const MysqlSet<ST> &in) {
+inline std::ostream& operator << (quote_only_type1 o, const MysqlSet<ST> &in) {
   return *o.ostr << "'" << in << "'";
 }
 
@@ -157,11 +160,11 @@
 
 enum quote_double_only_type0 {mysql_quote_double_only};
 struct quote_double_only_type1 {
-  ostream *ostr;
-  quote_double_only_type1(ostream *o) : ostr(o) {}
+  std::ostream *ostr;
+  quote_double_only_type1(std::ostream *o) : ostr(o) {}
 }; 
 
-inline quote_double_only_type1 operator << (ostream &o, 
+inline quote_double_only_type1 operator << (std::ostream &o, 
 					    quote_double_only_type0 esc) {
   return quote_double_only_type1(&o);
 }
@@ -179,39 +182,39 @@
 SQLQueryParms & operator << (quote_double_only_type2 p, SQLString &in);
 
 template <class T>
-inline ostream& operator << (quote_double_only_type1 o, const T &in) {
+inline std::ostream& operator << (quote_double_only_type1 o, const T &in) {
   return *o.ostr << in;
 }
 
 template <>
-inline ostream& operator << (quote_double_only_type1 o, const string &in) {
+inline std::ostream& operator << (quote_double_only_type1 o, const std::string &in) {
   return *o.ostr << "\"" << in << "\"";
 }
 
 template <>
-ostream& operator << (quote_double_only_type1 o, const mysql_ColData<string>& in);
+std::ostream& operator << (quote_double_only_type1 o, const mysql_ColData<std::string>& in);
 
 template <>
-ostream& operator << (quote_double_only_type1 o, const mysql_ColData<const_string>& in);
+std::ostream& operator << (quote_double_only_type1 o, const mysql_ColData<const_string>& in);
 
 template <>
-inline ostream& operator << (quote_double_only_type1 o, const Date &in) {
+inline std::ostream& operator << (quote_double_only_type1 o, const Date &in) {
   return *o.ostr << "\"" << in << "\"";
 }
 
 template <>
-inline ostream& operator << (quote_double_only_type1 o, const Time &in) {
+inline std::ostream& operator << (quote_double_only_type1 o, const Time &in) {
   return *o.ostr << "\"" << in << "\"";
 }
 
 template <>
-inline ostream& operator << (quote_double_only_type1 o, 
+inline std::ostream& operator << (quote_double_only_type1 o, 
 			     const DateTime &in) {
   return *o.ostr << "\"" << in << "\"";
 }
 
 template <class ST>
-inline ostream& operator << (quote_double_only_type1 o, 
+inline std::ostream& operator << (quote_double_only_type1 o, 
 			     const MysqlSet<ST> &in) {
   return *o.ostr << "\"" << in << "\"";
 }
@@ -220,11 +223,11 @@
 
 enum escape_type0 {mysql_escape};
 struct escape_type1 {
-  ostream *ostr;
-  escape_type1(ostream *o) : ostr(o) {}
+  std::ostream *ostr;
+  escape_type1(std::ostream *o) : ostr(o) {}
 }; 
 
-inline escape_type1 operator << (ostream &o, escape_type0 esc) {
+inline escape_type1 operator << (std::ostream &o, escape_type0 esc) {
   return escape_type1(&o);
 }
 
@@ -240,24 +243,24 @@
 SQLQueryParms & operator << (escape_type2 p, SQLString &in);
 
 template <class T>
-inline ostream& operator << (escape_type1 o, const T &in) {
+inline std::ostream& operator << (escape_type1 o, const T &in) {
   return *o.ostr << in;
 }
 
 template <>
-ostream& operator << (escape_type1 o, const string &in);
+std::ostream& operator << (escape_type1 o, const std::string &in);
 
 template <>
-ostream& operator << (escape_type1 o, const char* const &in);
+std::ostream& operator << (escape_type1 o, const char* const &in);
 
 template <>
-ostream& operator << (escape_type1 o, const mysql_ColData<string>& in);
+std::ostream& operator << (escape_type1 o, const mysql_ColData<std::string>& in);
 
 template <>
-ostream& operator << (escape_type1 o, const mysql_ColData<const_string>& in);
+std::ostream& operator << (escape_type1 o, const mysql_ColData<const_string>& in);
 
 template <>
-inline ostream& operator << (escape_type1 o, char* const &in) {
+inline std::ostream& operator << (escape_type1 o, char* const &in) {
   return operator << (o, const_cast<const char* const &>(in));
 }
 
@@ -266,16 +269,16 @@
 
 enum do_nothing_type0 {mysql_do_nothing};
 struct do_nothing_type1 {
-  ostream *ostr;
-  do_nothing_type1(ostream *o) : ostr(o) {}
+  std::ostream *ostr;
+  do_nothing_type1(std::ostream *o) : ostr(o) {}
 }; 
 
-inline do_nothing_type1 operator << (ostream &o, do_nothing_type0 esc) {
+inline do_nothing_type1 operator << (std::ostream &o, do_nothing_type0 esc) {
   return do_nothing_type1(&o);
 }
 
 template <class T>
-inline ostream& operator << (do_nothing_type1 o, const T &in) {
+inline std::ostream& operator << (do_nothing_type1 o, const T &in) {
   return *o.ostr << in;
 }
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/null1.hh mysql++-1.7.9/sqlplusint/null1.hh
--- mysql++-1.7.9.orig/sqlplusint/null1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/null1.hh	Sun Sep 15 13:29:08 2002
@@ -1,7 +1,7 @@
 #ifndef __null1_hh__
 #define __null1_hh__
 
-#include <ostream.h>
+#include <ostream>
 #include "exceptions.hh"
 #include "define_short"
 
@@ -18,19 +18,19 @@
 //: Type to use for the behavior parameter for *Null<>*
 struct NullisNull {
   static null_type null_is() {return null_type();}
-  static ostream&  null_ostr(ostream& o) {o << "(NULL)"; return o;}
+  static std::ostream&  null_ostr(std::ostream& o) {o << "(NULL)"; return o;}
 };
 
 //: Type to use for the behavior parameter for *Null<>*
 struct NullisZero {
   static int   null_is() {return 0;}
-  static ostream& null_ostr(ostream &o) {o << 0; return o;}
+  static std::ostream& null_ostr(std::ostream &o) {o << 0; return o;}
 };
 
 //: Type to use for the behavior parameter for *Null<>*
 struct NullisBlank {
   static const char * null_is() {return "";}
-  static ostream& null_ostr(ostream &o) {o << ""; return o;}
+  static std::ostream& null_ostr(std::ostream &o) {o << ""; return o;}
 };
 
 //: Container class for holding null types.
diff -Nur mysql++-1.7.9.orig/sqlplusint/null2.hh mysql++-1.7.9/sqlplusint/null2.hh
--- mysql++-1.7.9.orig/sqlplusint/null2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/null2.hh	Sun Sep 15 13:29:08 2002
@@ -4,7 +4,7 @@
 #include "null1.hh"
 
 template <class Type, class Behavior>
-inline ostream& operator << (ostream &o, const Null<Type,Behavior> &n) {
+inline std::ostream& operator << (std::ostream &o, const Null<Type,Behavior> &n) {
   if (n.is_null) return Behavior::null_ostr(o);
   else return o << n.data;
 }
diff -Nur mysql++-1.7.9.orig/sqlplusint/query.cc mysql++-1.7.9/sqlplusint/query.cc
--- mysql++-1.7.9.orig/sqlplusint/query.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/query.cc	Sun Sep 15 13:29:08 2002
@@ -13,7 +13,7 @@
   return *this;
 }
 
-bool MysqlQuery::exec (const string& str) { return mysql->exec(str);}
+bool MysqlQuery::exec (const std::string& str) { return mysql->exec(str);}
 
 
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/query1.hh mysql++-1.7.9/sqlplusint/query1.hh
--- mysql++-1.7.9.orig/sqlplusint/query1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/query1.hh	Sun Sep 15 13:29:08 2002
@@ -25,7 +25,7 @@
 
   int     affected_rows() const;
   int     insert_id ();
-  string  info ();
+  std::string info ();
   bool    lock();
   void    unlock();
 
@@ -36,13 +36,13 @@
   Query(const Query &q); //:
   Query& operator = (const Query &q); //:
 
-  string   error ();  //: The error message if the query was not successful.
+  std::string error ();  //: The error message if the query was not successful.
   bool     success(); //: Displays the string currently in the buffer.
   // Same thing as string().
 
-  string   preview () {return str(def);}       //:
-  string   preview (parms &p) {return str(p);} //:
-	bool     exec (const string &str);
+  std::string preview () {return str(def);}       //:
+  std::string preview (parms &p) {return str(p);} //:
+	bool     exec (const std::string &str);
   //!dummy: MysqlResNSel execute (...);
   //: Executes the query in the string buffer.
   // Executes the query in the string buffer and returns a structure
@@ -67,7 +67,7 @@
   //
   // The parameters can be anything in a valid SQLQuery::str.
 
-  mysql_query_define0(string,preview)
+  mysql_query_define0(std::string,preview)
 
   mysql_query_define1(ResNSel, execute)
   mysql_query_define1(ResUse, use)
diff -Nur mysql++-1.7.9.orig/sqlplusint/query2.hh mysql++-1.7.9/sqlplusint/query2.hh
--- mysql++-1.7.9.orig/sqlplusint/query2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/query2.hh	Sun Sep 15 13:29:08 2002
@@ -47,12 +47,12 @@
   return mysql->insert_id();
 }
 
-inline string Query::info() {
+inline std::string Query::info() {
   return mysql->info();
 }
 
-inline string Query::error () {
-  if (errmsg) return string(errmsg);
+inline std::string Query::error () {
+  if (errmsg) return std::string(errmsg);
   return mysql->error();
 }
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/resiter1.hh mysql++-1.7.9/sqlplusint/resiter1.hh
--- mysql++-1.7.9.orig/sqlplusint/resiter1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/resiter1.hh	Sun Sep 15 13:29:08 2002
@@ -3,7 +3,7 @@
 
 #include "defs"
 #include "row1.hh"
-#include <iterator.h>
+#include <iterator>
 
 template <class OnType, class ReturnType, class SizeType, class DiffType>
 class subscript_iterator;
@@ -22,8 +22,8 @@
   typedef subscript_iterator<const this_type, ReturnType, SizeType, DiffType> 
                                                  iterator;   //:
   typedef iterator                               const_iterator; //:
-  typedef const ::reverse_iterator<iterator>       reverse_iterator; //:
-  typedef const ::reverse_iterator<const_iterator> const_reverse_iterator; //:
+  typedef const std::reverse_iterator<iterator>    reverse_iterator; //:
+  typedef const std::reverse_iterator<const_iterator> const_reverse_iterator; //:
   
   typedef ValueType   value_type; //:
   typedef value_type& reference;  //:
@@ -49,7 +49,7 @@
 
 //:
 template <class OnType, class ReturnType, class SizeType, class DiffType>
-class subscript_iterator : public random_access_iterator<ReturnType, SizeType>
+class subscript_iterator : public std::iterator<ReturnType, SizeType>
 {
 private:
   SizeType    i;
diff -Nur mysql++-1.7.9.orig/sqlplusint/result1.hh mysql++-1.7.9/sqlplusint/result1.hh
--- mysql++-1.7.9.orig/sqlplusint/result1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/result1.hh	Sun Sep 15 13:29:08 2002
@@ -7,8 +7,8 @@
 #include <winsock.h>
 #define errno WSAGetLastError()
 #endif
-#include <map.h>
-#include <set.h>
+#include <map>
+#include <set>
 #include <mysql.h>
 #include <string>
 #include "define_short"
@@ -20,7 +20,7 @@
 #include "exceptions.hh"
 //:
 class ResUse  {
-  friend Connection;
+  friend class Connection;
 protected:
   Connection            *mysql;
   mutable MYSQL_RES     *mysql_res;
@@ -28,7 +28,7 @@
   mutable FieldNames    *_names;
   mutable FieldTypes    *_types;
   Fields                _fields;
-  string                _table;       
+  std::string           _table;       
   void copy(const ResUse& other);  //: not to be used on the self. self - copy is not allowed
 public:
   ResUse () : mysql(0), mysql_res(0), throw_exceptions(false),initialized(false), _names(NULL), _types(NULL), _fields(this) {}
@@ -72,17 +72,17 @@
   operator bool() const {if (mysql_res) return true; return false;} //:
   unsigned int columns() const {return num_fields();} //:
 
-  string& table() {return _table;}
+  std::string& table() {return _table;}
   //: table name
-  const string& table() const {return _table;}
+  const std::string& table() const {return _table;}
   //: table name
 
   /* methods for working with field names */
-  inline int               field_num(const string&) const;
+  inline int               field_num(const std::string&) const;
   //: Returns the offset of the filed which equals str.
-  inline string&           field_name(int);
+  inline std::string&      field_name(int);
   //: Returns the field with an offset of i.
-  inline const string&     field_name(int) const;
+  inline const std::string& field_name(int) const;
   //: Returns the field with an offset of i.
   inline FieldNames&       field_names();
   //: Returns a reference to the underlying FieldNames class.
@@ -104,11 +104,11 @@
   //: Resets the field_types to their original values.
 
   /* short names for the above methods */
-  inline int               names(const string& s) const;
+  inline int               names(const std::string& s) const;
   //: Returns the offset of the filed which equals str.
-  inline string&           names(int i);
+  inline std::string&      names(int i);
   //: Returns the field with an offset of i.
-  inline const string&     names(int i) const;
+  inline const std::string& names(int i) const;
   //: Returns the field with an offset of i.
   inline FieldNames&       names();
   //: Returns a reference to the underlying FieldNames class.
@@ -151,7 +151,7 @@
 class Result : public ResUse, 
 	       public const_subscript_container<Result,Row,const Row>
 {
-  friend Connection;
+  friend class Connection;
 public:
   Result () {} //:
   Result (MYSQL_RES *result, bool te = false) 
@@ -210,7 +210,7 @@
   bool     success;   
   int      insert_id; //: 
   int      rows;      //: Number of rows affected
-  string   info;      //: Additional info
+  std::string info;      //: Additional info
 
   ResNSel() : success(false) {};
   ResNSel (Connection *q);
diff -Nur mysql++-1.7.9.orig/sqlplusint/result2.hh mysql++-1.7.9/sqlplusint/result2.hh
--- mysql++-1.7.9.orig/sqlplusint/result2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/result2.hh	Sun Sep 15 13:29:08 2002
@@ -8,17 +8,17 @@
 
 // field name info
 
-inline int ResUse::field_num(const string &i) const {
+inline int ResUse::field_num(const std::string &i) const {
   if (!_names) _names = new FieldNames(this);
   return (*_names)[i];
 }
 
-inline string& ResUse::field_name(int i) {
+inline std::string& ResUse::field_name(int i) {
   if (!_names) _names = new FieldNames(this);
   return (*_names)[i];
 }
 
-inline const string& ResUse::field_name(int i) const {
+inline const std::string& ResUse::field_name(int i) const {
   if (!_names) _names = new FieldNames(this);
   return (*_names)[i];
 }
@@ -65,9 +65,9 @@
   _types = new FieldTypes(this);
 }
 
-inline int               ResUse::names(const string& s) const {return field_num(s);}
-inline string&           ResUse::names(int i) {return field_name(i);}
-inline const string&     ResUse::names(int i) const {return field_name(i);}
+inline int               ResUse::names(const std::string& s) const {return field_num(s);}
+inline std::string&      ResUse::names(int i) {return field_name(i);}
+inline const std::string& ResUse::names(int i) const {return field_name(i);}
 inline FieldNames&       ResUse::names() {return field_names();}
 inline const FieldNames& ResUse::names() const {return field_names();}
 inline void              ResUse::reset_names() {reset_field_names();}
diff -Nur mysql++-1.7.9.orig/sqlplusint/row1.hh mysql++-1.7.9/sqlplusint/row1.hh
--- mysql++-1.7.9.orig/sqlplusint/row1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/row1.hh	Sun Sep 15 13:29:08 2002
@@ -35,17 +35,17 @@
 
   template <class Manip>  
   value_list_b<ThisType,Manip> 
-  value_list(const char *d, Manip m, const vector<bool> &vb) const {
+  value_list(const char *d, Manip m, const std::vector<bool> &vb) const {
     return value_list_b<ThisType,Manip> (self(), vb, d, m);
   }
 
   value_list_b<ThisType,quote_type0> 
-  value_list(const char *d, const vector<bool> &vb) const {
+  value_list(const char *d, const std::vector<bool> &vb) const {
     return value_list_b<ThisType,quote_type0> (self(), vb, d, quote);
   }
 
   value_list_b<ThisType,quote_type0> 
-  value_list(const vector<bool> &vb) const {
+  value_list(const std::vector<bool> &vb) const {
     return value_list_b<ThisType,quote_type0> (self(), vb, ",", quote);
   }
 
@@ -55,7 +55,7 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(self().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<ThisType, Manip>(self(), vb, d, m);
   }
@@ -65,7 +65,7 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(self().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<ThisType, quote_type0>(self(), vb, d, quote);
   }
@@ -75,38 +75,38 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(self().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<ThisType, quote_type0>(self(), vb, ",", quote);
   }
 
   template <class Manip>
   value_list_b<ThisType,Manip> 
-  value_list(const char *d, Manip m, string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  value_list(const char *d, Manip m, std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(self(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<ThisType, Manip>(self(), vb, d, m);
   }
 
   value_list_b<ThisType,quote_type0> 
-  value_list(const char *d, string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  value_list(const char *d, std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(self(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<ThisType, quote_type0>(self(), vb, d, quote);
   }
 
   value_list_b<ThisType,quote_type0> 
-  value_list(string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  value_list(std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(self(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<ThisType, quote_type0>(self(), vb, ",", quote);
   }
@@ -129,17 +129,17 @@
 
   template <class Manip>  
   value_list_b<FieldNames,Manip> 
-  field_list(const char *d, Manip m, const vector<bool> &vb) const {
+  field_list(const char *d, Manip m, const std::vector<bool> &vb) const {
     return value_list_b<FieldNames,Manip> (parent().names(), vb, d, m);
   }
 
   value_list_b<FieldNames,quote_type0> 
-  field_list(const char *d, const vector<bool> &vb) const {
+  field_list(const char *d, const std::vector<bool> &vb) const {
     return value_list_b<FieldNames,quote_type0> (parent().names(), vb, d, quote);
   }
 
   value_list_b<FieldNames,quote_type0> 
-  field_list(const vector<bool> &vb) const {
+  field_list(const std::vector<bool> &vb) const {
     return value_list_b<FieldNames,quote_type0> (parent().names(), vb, ",", quote);
   }
 
@@ -149,7 +149,7 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(parent().names().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<FieldNames, Manip>(parent().names(), vb, d, m);
   }
@@ -159,7 +159,7 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(parent().names().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<FieldNames, quote_type0>(parent().names(), vb, d, quote);
   }
@@ -169,38 +169,38 @@
 	     bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 	     bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	     bool t9=false, bool ta=false, bool tb=false, bool tc=false) const {
-    vector<bool> vb;
+    std::vector<bool> vb;
     create_vector(parent().names().size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
     return value_list_b<FieldNames, quote_type0>(parent().names(), vb, ",", quote);
   }
 
   template <class Manip>
   value_list_b<FieldNames,Manip> 
-  field_list(const char *d, Manip m, string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  field_list(const char *d, Manip m, std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(parent().names(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<FieldNames, Manip>(parent().names(), vb, d, m);
   }
 
   value_list_b<FieldNames,quote_type0> 
-  field_list(const char *d, string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  field_list(const char *d, std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(parent().names(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<FieldNames, quote_type0>(parent().names(), vb, d, quote);
   }
 
   value_list_b<FieldNames,quote_type0> 
-  field_list(string s0,
-	     string s1="", string s2="", string s3="", string s4="",
-	     string s5="", string s6="", string s7="", string s8="",
-	     string s9="", string sa="", string sb="", string sc="") const {
-    vector<bool> vb;
+  field_list(std::string s0,
+	     std::string s1="", std::string s2="", std::string s3="", std::string s4="",
+	     std::string s5="", std::string s6="", std::string s7="", std::string s8="",
+	     std::string s9="", std::string sa="", std::string sb="", std::string sc="") const {
+    std::vector<bool> vb;
     create_vector(parent().names(), vb, s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sa,sb,sc);
     return value_list_b<FieldNames, quote_type0>(parent().names(), vb, ",", quote);
   }
@@ -229,8 +229,8 @@
 	    public RowTemplate<Row, ResUse>
 {
 private:
-  vector <string> data;
-	vector <bool> is_nulls;
+  std::vector <std::string> data;
+	std::vector <bool> is_nulls;
   const ResUse *res;
   bool         throw_exceptions, initialized;
 
@@ -246,7 +246,7 @@
 		  data.clear(); is_nulls.clear(); initialized=true;
 		  for (unsigned int i=0;i<size();i++) 
 			{
-			  data.insert(data.end(),(d[i]) ? string(d[i],jj[i]) : (string)"NULL");
+			  data.insert(data.end(),(d[i]) ? std::string(d[i],jj[i]) : (std::string)"NULL");
 				is_nulls.insert(is_nulls.end(),d[i] ? false : true);
 			}
 		}
@@ -268,7 +268,7 @@
   inline const ColData   operator [] (const char *) const;
   //: Returns the value of the field with the field name of i.
   // This method is not nearly as efficient as using the index number. Use sparingly. 
-  inline const ColData   operator [] (const string &i) const;
+  inline const ColData   operator [] (const std::string &i) const;
   //: Returns the value of the field with the field name of i.
   // This method is not nearly as effecent as using the index number. Use sparingly. 
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/row2.hh mysql++-1.7.9/sqlplusint/row2.hh
--- mysql++-1.7.9.orig/sqlplusint/row2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/row2.hh	Sun Sep 15 13:29:08 2002
@@ -11,12 +11,12 @@
   return ColData(data[i].c_str(), res->types(i),is_nulls[i]);
 }
 
-inline const ColData Row::operator[] (const string &i) const {
+inline const ColData Row::operator[] (const std::string &i) const {
   return (*this)[res->field_num(i)];
 }
 
 inline const ColData Row::operator[] (const char *i) const {
-  return (*this)[res->field_num(string(i))];
+  return (*this)[res->field_num(std::string(i))];
 }
 
 // RowTemplate
diff -Nur mysql++-1.7.9.orig/sqlplusint/set.cc mysql++-1.7.9/sqlplusint/set.cc
--- mysql++-1.7.9.orig/sqlplusint/set.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/set.cc	Sun Sep 15 13:29:08 2002
@@ -1,4 +1,4 @@
 
 #include "set3.hh"
 
-template class Set<set<string> >;
+template class Set<std::set<std::string> >;
diff -Nur mysql++-1.7.9.orig/sqlplusint/set1.hh mysql++-1.7.9/sqlplusint/set1.hh
--- mysql++-1.7.9.orig/sqlplusint/set1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/set1.hh	Sun Sep 15 13:29:08 2002
@@ -9,7 +9,7 @@
 #endif
 #include <set>
 #include <vector>
-#include <iostream.h>
+#include <iostream>
 #include "define_short"
 #include "coldata1.hh"
 
@@ -32,37 +32,37 @@
 };
 
 template <class T>
-inline MysqlSetInsert<set<T> > set_insert(set<T> *o) {
-  return MysqlSetInsert<set<T> >(o);
+inline MysqlSetInsert<std::set<T> > set_insert(std::set<T> *o) {
+  return MysqlSetInsert<std::set<T> >(o);
 }
 
 template <class T>
-inline MysqlListInsert<vector<T> > set_insert(vector<T> *o) {
-  return MysqlListInsert<vector<T> >(o);
+inline MysqlListInsert<std::vector<T> > set_insert(std::vector<T> *o) {
+  return MysqlListInsert<std::vector<T> >(o);
 }
 
 template <class Insert>
 void set2container (const char *str, Insert insert);
 
 //: A Special Set for holding mysql sets.
-template <class Container = set<string> >
+template <class Container = std::set<std::string> >
 class Set : public Container {
 public:
   Set(const char* str) {set2container(str,set_insert(this));}           //:
-  Set(const string &str) {set2container(str.c_str(),set_insert(this));} //:
+  Set(const std::string &str) {set2container(str.c_str(),set_insert(this));} //:
   Set(const ColData &str) 
     {set2container(str.c_str(),set_insert(this));}                      //:
   
-  ostream& out_stream(ostream &s) const;
+  std::ostream& out_stream(std::ostream &s) const;
   
-  operator string ();
+  operator std::string ();
 };
 
 //! with_class = Set
 
 //:
 template <class Container>
-inline ostream& operator << (ostream &s, const Set<Container> &d) 
+inline std::ostream& operator << (std::ostream &s, const Set<Container> &d) 
 { 
   return d.out_stream(s); 
 }
diff -Nur mysql++-1.7.9.orig/sqlplusint/set2.hh mysql++-1.7.9/sqlplusint/set2.hh
--- mysql++-1.7.9.orig/sqlplusint/set2.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/set2.hh	Sun Sep 15 13:29:08 2002
@@ -5,8 +5,8 @@
 #include "stream2string3.hh"
 
 template <class Container> 
-inline Set<Container>::operator string () {
-  return stream2string<string>(*this);
+inline Set<Container>::operator std::string () {
+  return stream2string<std::string>(*this);
 }
 
 #endif
diff -Nur mysql++-1.7.9.orig/sqlplusint/set3.hh mysql++-1.7.9/sqlplusint/set3.hh
--- mysql++-1.7.9.orig/sqlplusint/set3.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/set3.hh	Sun Sep 15 13:29:08 2002
@@ -20,7 +20,7 @@
 }
 
 template <class Container>
-ostream& Set<Container>::out_stream (ostream &s) const {
+std::ostream& Set<Container>::out_stream (std::ostream &s) const {
   typename Container::const_iterator i = begin();
   typename Container::const_iterator e = end();
   while (true) {
diff -Nur mysql++-1.7.9.orig/sqlplusint/sql_query.cc mysql++-1.7.9/sqlplusint/sql_query.cc
--- mysql++-1.7.9.orig/sqlplusint/sql_query.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/sql_query.cc	Sun Sep 15 13:29:08 2002
@@ -10,6 +10,8 @@
 #include "exceptions.hh"
 //#include "result3.hh"
 
+using namespace std;
+
 SQLQuery::SQLQuery(const SQLQuery &q) {
   *this << q.str();
   Success = q.Success;
diff -Nur mysql++-1.7.9.orig/sqlplusint/sql_query1.hh mysql++-1.7.9/sqlplusint/sql_query1.hh
--- mysql++-1.7.9.orig/sqlplusint/sql_query1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/sql_query1.hh	Sun Sep 15 13:29:08 2002
@@ -1,7 +1,7 @@
 #ifndef __sql_query_1_hh
 #define __sql_query_1_hh
 
-#include <strstream.h>
+#include <strstream>
 #include <vector>
 #include <map>
 #include "define_short"
@@ -16,8 +16,8 @@
 
 //: This class holds the parameter values for filling template queries. 
 // It is a subclass of a vector of *SQLStrings*.
-class SQLQueryParms : public vector<SQLString> {
-  friend Query;
+class SQLQueryParms : public std::vector<SQLString> {
+  friend class Query;
 private:
   typedef const SQLString&      ss;
   SQLQuery                 *parent;
@@ -28,10 +28,10 @@
   void               clear() {erase(begin(),end());} //: Clears the list
   SQLString &operator [] (size_type n) {
     if (n >= size()) insert(end(),(n+1) - size(), "");
-    return vector<SQLString>::operator [] (n);
+    return std::vector<SQLString>::operator [] (n);
   } //: Access element number n
   const SQLString &operator [] (size_type n) const 
-    {return vector<SQLString>::operator [] (n);}     
+    {return std::vector<SQLString>::operator [] (n);}     
   //: Access element number n
   SQLString &operator [] (const char *str); 
   //: Access the value of the element with a key of str.
@@ -81,8 +81,8 @@
 enum query_reset {DONT_RESET, RESET_QUERY};
 
 struct SQLParseElement {
-  SQLParseElement(string b, char o, char n) : before(b),option(o),num(n) {}
-  string before;
+  SQLParseElement(std::string b, char o, char n) : before(b),option(o),num(n) {}
+  std::string before;
   char   option;
   char   num;
 };
@@ -107,16 +107,16 @@
 // your query before you try to use any of the *SQLQuery* specific
 // methods except for *error()* and *success()*.
 
-class SQLQuery : public strstream { 
-  friend SQLQueryParms; 
+class SQLQuery : public std::strstream { 
+  friend class SQLQueryParms; 
 private:
   char* preview_char();
 protected:
   bool    Success;
   char*   errmsg;
-  vector<SQLParseElement> parsed;
-  vector<string>          parsed_names;
-  map<string,int>         parsed_nums;
+  std::vector<SQLParseElement> parsed;
+  std::vector<std::string> parsed_names;
+  std::map<std::string,int> parsed_nums;
   typedef  const SQLString&  ss;
   typedef  SQLQueryParms  parms;
   void     proc(parms &p);
@@ -130,7 +130,7 @@
 
   void     parse();  
 
-  string   error () const {return errmsg;}
+  std::string   error () const {return errmsg;}
   bool     success() const {return Success;}
 
   operator bool () {return success();}
@@ -184,7 +184,7 @@
     return *this;
   } //:
 
-  mysql_query_define_const1(string,str)
+  mysql_query_define_const1(std::string,str)
 };  
 
 #endif
diff -Nur mysql++-1.7.9.orig/sqlplusint/sql_string1.hh mysql++-1.7.9/sqlplusint/sql_string1.hh
--- mysql++-1.7.9.orig/sqlplusint/sql_string1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/sql_string1.hh	Sun Sep 15 13:29:08 2002
@@ -10,22 +10,22 @@
 // A class subclassed from string that has the additional ability to
 // convert from any valid mysql type.
 
-class SQLString : public string {
+class SQLString : public std::string {
 public:
   bool is_string;
   bool dont_escape;
   bool processed;
 
   SQLString() : is_string(false) , processed(false) {}
-  SQLString (const string& str) :string (str)
+  SQLString (const std::string& str) : std::string (str)
     {is_string=true;processed=false;dont_escape=false;}
-  SQLString (const char *str) :string (str) 
+  SQLString (const char *str) : std::string (str) 
     {is_string=true;processed=false;dont_escape=false;}
   SQLString& operator = (const char *str) {
-    string::operator = (str); return *this;
+    std::string::operator = (str); return *this;
   }
-  SQLString& operator = (const string& str) {
-    string::operator = (str); return *this;
+  SQLString& operator = (const std::string& str) {
+    std::string::operator = (str); return *this;
   }
   SQLString (char i) : is_string(false), processed(false)
     {char s[6]; sprintf(s,"%dh",(short int)i); *this=s;}
diff -Nur mysql++-1.7.9.orig/sqlplusint/stream2string3.hh mysql++-1.7.9/sqlplusint/stream2string3.hh
--- mysql++-1.7.9.orig/sqlplusint/stream2string3.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/stream2string3.hh	Sun Sep 15 13:29:08 2002
@@ -1,13 +1,13 @@
 #ifndef __stream2string3_hh__
 #define __stream2string3_hh__
 
-#include <strstream.h>
+#include <strstream>
 
 template<class Strng, class T>
 Strng stream2string(const T &object) {
-  ostrstream str;
+  std::ostrstream str;
   object.out_stream(str);
-  str << ends;
+  str << std::ends;
   Strng s = str.str();
 #ifdef __USLC__
   strstreambuf *tmpbuf = str.rdbuf();
diff -Nur mysql++-1.7.9.orig/sqlplusint/string_util.cc mysql++-1.7.9/sqlplusint/string_util.cc
--- mysql++-1.7.9.orig/sqlplusint/string_util.cc	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/string_util.cc	Sun Sep 15 13:29:08 2002
@@ -1,5 +1,6 @@
 #include <string>
 
+using namespace std;
 
 void strip (string& s) {
 	int i,j = s.size() - 1;  if (!s.size()) return;
diff -Nur mysql++-1.7.9.orig/sqlplusint/string_util.hh mysql++-1.7.9/sqlplusint/string_util.hh
--- mysql++-1.7.9.orig/sqlplusint/string_util.hh	Sat May 19 18:44:49 2001
+++ mysql++-1.7.9/sqlplusint/string_util.hh	Sun Sep 15 13:29:08 2002
@@ -3,28 +3,28 @@
 #include <ctype.h>
 #include <string>
 
-extern void strip (string& s); // Strips blanks at left and right ends
+extern void strip (std::string& s); // Strips blanks at left and right ends
 
-extern void escape_string (string& s); // C++ equivalent of mysql_escape_string
+extern void escape_string (std::string& s); // C++ equivalent of mysql_escape_string
 
-inline void str_to_upr (string& s) { // Changes case of string to upper
+inline void str_to_upr (std::string& s) { // Changes case of string to upper
 	for (unsigned int cnt=0; cnt < s.length(); cnt++) {
 		char c = s[cnt]; s[cnt]=toupper(c);
 	}
 }
 
-inline void str_to_lwr (string& s) { // Changes case of string to lower
+inline void str_to_lwr (std::string& s) { // Changes case of string to lower
 	for (unsigned int cnt=0; cnt < s.length(); cnt++) {
 		char c = s[cnt]; s[cnt]=tolower(c);
 	}
 }
 
-inline void strip_all_blanks (string& s) { // Removes all blanks
+inline void strip_all_blanks (std::string& s) { // Removes all blanks
 	for (unsigned int counter=0;counter < s.size();counter++)
 		if (s[counter] == ' ') { s.erase(counter,1); counter--;}
 }
 
-inline void strip_all_non_num (string& s) { // Removes all non-numerics
+inline void strip_all_non_num (std::string& s) { // Removes all non-numerics
 	for (unsigned int counter=0;counter < s.size();counter++)
 		if (!isdigit(s[counter])) { s.erase(counter,1); counter--;}
 }
diff -Nur mysql++-1.7.9.orig/sqlplusint/type_info.cc mysql++-1.7.9/sqlplusint/type_info.cc
--- mysql++-1.7.9.orig/sqlplusint/type_info.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/type_info.cc	Sun Sep 15 13:29:08 2002
@@ -5,11 +5,13 @@
 #include <winsock.h>
 #endif
 #include <mysql.h>
-#include <string.h>
+#include <string>
 #include "datetime1.hh"
 #include "set1.hh"
 #include "type_info3.hh"
 
+using namespace std;
+
 typedef string Enum;
 
 const mysql_type_info::sql_type_info mysql_type_info::types[62] = {
diff -Nur mysql++-1.7.9.orig/sqlplusint/type_info1.hh mysql++-1.7.9/sqlplusint/type_info1.hh
--- mysql++-1.7.9.orig/sqlplusint/type_info1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/type_info1.hh	Sun Sep 15 13:29:08 2002
@@ -11,19 +11,16 @@
 #include <typeinfo>
 #include <map>
 
-#ifdef __USLC__
-using namespace std;
-#endif
 
 class mysql_type_info;
 class mysql_ti_sql_type_info_lookup;
 
 class mysql_ti_sql_type_info {
-  friend mysql_type_info;
-  friend mysql_ti_sql_type_info_lookup;
+  friend class mysql_type_info;
+  friend class mysql_ti_sql_type_info_lookup;
 private:
   const char          *_sql_name;
-  const type_info     *_c_type;
+  const std::type_info *_c_type;
   const unsigned char  _base_type;
   const bool           _default;
   mysql_ti_sql_type_info (const mysql_ti_sql_type_info &b);           // can't do
@@ -33,27 +30,27 @@
   // all private, only mysql_type_info can
   // create because there *must* be only one copy
   // of each.
-  mysql_ti_sql_type_info (const char *s, const type_info &t, 
+  mysql_ti_sql_type_info (const char *s, const std::type_info &t, 
 			  const unsigned char bt = 0,  const bool d = false )
     : _sql_name(s), _c_type(&t), _base_type(bt), _default(d) {}
 };
 
 struct type_info_cmp {
-  bool operator() (const type_info *lhs, const type_info *rhs) const {
+  bool operator() (const std::type_info *lhs, const std::type_info *rhs) const {
     return lhs->before(*rhs);
   }
 };
 
 class mysql_ti_sql_type_info_lookup {
-  friend mysql_type_info;
+  friend class mysql_type_info;
 private:
   typedef mysql_ti_sql_type_info sql_type_info;
 
-  map<const type_info *, unsigned char, type_info_cmp> _map;
+  std::map<const std::type_info *, unsigned char, type_info_cmp> _map;
   
   mysql_ti_sql_type_info_lookup(const sql_type_info types[], const int size);
 
-  const unsigned char& operator [] (const type_info &ti) const {
+  const unsigned char& operator [] (const std::type_info &ti) const {
     return _map.find(&ti)->second;
   }
 };
@@ -94,14 +91,14 @@
   //:
   mysql_type_info(const mysql_type_info &t) : num(t.num) {}
   //:
-  mysql_type_info(const type_info &t) {num = lookups[t]; }
+  mysql_type_info(const std::type_info &t) {num = lookups[t]; }
   //: 
   mysql_type_info& operator = (unsigned char n) {num=n; return *this;}
   //:
   mysql_type_info& operator = (const mysql_type_info &t) 
     {num = t.num; return *this;}
   //:
-  mysql_type_info& operator = (const type_info &t)
+  mysql_type_info& operator = (const std::type_info &t)
     {num = lookups[t]; return *this;}
   //:
   inline const char*           name()      const;
@@ -110,7 +107,7 @@
   // associated with the sql type.
   inline const char*           sql_name()  const;
   //: Returns the name for the sql type.
-  inline const type_info&      c_type()    const;
+  inline const std::type_info& c_type()    const;
 	inline const unsigned int length() const;
 	inline const unsigned int max_length() const;
   //: Returns the type_info for the C++ type associated with the sql type.
@@ -146,7 +143,7 @@
 inline const unsigned int    mysql_type_info::max_length()  const {
   return _max_length;
 }
-inline const type_info&      mysql_type_info::c_type()    const {
+inline const std::type_info& mysql_type_info::c_type()    const {
   return *deref()._c_type;
 }
 inline const mysql_type_info mysql_type_info::base_type() const 
@@ -172,19 +169,19 @@
   return a.id() != b.id();
 }
 
-inline bool operator == (const type_info &a, const mysql_type_info &b) {
+inline bool operator == (const std::type_info &a, const mysql_type_info &b) {
   return a == b.c_type();
 }
 
-inline bool operator != (const type_info &a, const mysql_type_info &b) {
+inline bool operator != (const std::type_info &a, const mysql_type_info &b) {
   return a != b.c_type();
 }
 
-inline bool operator == (const mysql_type_info &a, const type_info &b) {
+inline bool operator == (const mysql_type_info &a, const std::type_info &b) {
   return a.c_type() == b;
 }
 
-inline bool operator != (const mysql_type_info &a, const type_info &b) {
+inline bool operator != (const mysql_type_info &a, const std::type_info &b) {
   return a.c_type() != b;
 }
 
diff -Nur mysql++-1.7.9.orig/sqlplusint/vallist.cc mysql++-1.7.9/sqlplusint/vallist.cc
--- mysql++-1.7.9.orig/sqlplusint/vallist.cc	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/vallist.cc	Sun Sep 15 13:29:08 2002
@@ -1,6 +1,8 @@
 #include "vallist3.hh"
 #include "row2.hh"
 
+using namespace std;
+
 void create_vector(int size, vector<bool>& v, bool t0, 
 		   bool t1, bool t2, bool t3, bool t4,
 		   bool t5, bool t6, bool t7, bool t8,
diff -Nur mysql++-1.7.9.orig/sqlplusint/vallist1.hh mysql++-1.7.9/sqlplusint/vallist1.hh
--- mysql++-1.7.9.orig/sqlplusint/vallist1.hh	Sat May 19 18:44:48 2001
+++ mysql++-1.7.9/sqlplusint/vallist1.hh	Sun Sep 15 13:29:08 2002
@@ -8,10 +8,10 @@
 template <class Seq, class Manip>
 struct value_list_b {
   const Seq          *list;
-  const vector<bool> fields;
+  const std::vector<bool> fields;
   const char         *delem;
   Manip              manip;
-  value_list_b(const Seq &s, const vector<bool> &f, const char *d, Manip m) 
+  value_list_b(const Seq &s, const std::vector<bool> &f, const char *d, Manip m) 
     : list(&s), fields(f), delem(d), manip(m) {}
 };
 
@@ -19,11 +19,11 @@
 struct equal_list_b {
   const Seq1         *list1;
   const Seq2         *list2;
-  const vector<bool> fields;
+  const std::vector<bool> fields;
   const char         *delem;
   const char         *equl;
   Manip              manip;
-  equal_list_b(const Seq1 &s1, const Seq2 &s2, const vector<bool> &f,
+  equal_list_b(const Seq1 &s1, const Seq2 &s2, const std::vector<bool> &f,
 	       const char *d, const char *e, Manip m) 
     : list1(&s1), list2(&s2), fields(f), delem(d), equl(e), manip(m) {}
 };
@@ -52,7 +52,7 @@
 //
 
 template <class Seq, class Manip>
-ostream& operator << (ostream &o, const value_list_b<Seq, Manip> &cl) {
+std::ostream& operator << (std::ostream &o, const value_list_b<Seq, Manip> &cl) {
   typename Seq::const_iterator i =  cl.list->begin();
   register int k = 0;
   for (;;) {
@@ -67,7 +67,7 @@
 }
 
 template <class Seq1, class Seq2, class Manip>
-ostream& operator << (ostream &o, const equal_list_b<Seq1, Seq2, Manip> &el) {
+std::ostream& operator << (std::ostream &o, const equal_list_b<Seq1, Seq2, Manip> &el) {
   typename Seq1::const_iterator i = el.list1->begin();
   typename Seq2::const_iterator j = el.list2->begin();
   register int k = 0;
@@ -84,7 +84,7 @@
 }
 
 template <class Seq, class Manip>
-ostream& operator << (ostream &o, const value_list_ba<Seq, Manip> &cl) {
+std::ostream& operator << (std::ostream &o, const value_list_ba<Seq, Manip> &cl) {
   typename Seq::const_iterator i =  cl.list->begin();
   for (;;) {
     o << cl.manip << *i;
@@ -95,7 +95,7 @@
 }
 
 template <class Seq1, class Seq2, class Manip>
-ostream& operator << (ostream &o, const equal_list_ba<Seq1, Seq2, Manip> &el) {
+std::ostream& operator << (std::ostream &o, const equal_list_ba<Seq1, Seq2, Manip> &el) {
   typename Seq1::const_iterator i = el.list1->begin();
   typename Seq2::const_iterator j = el.list2->begin();
   for (;;) {
@@ -123,16 +123,16 @@
 // create vector
 //
 
-void create_vector(int size, vector<bool>& v, bool t0, 
+void create_vector(int size, std::vector<bool>& v, bool t0, 
 		   bool t1=false, bool t2=false, bool t3=false, bool t4=false,
 		   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 		   bool t9=false, bool ta=false, bool tb=false, bool tc=false);
 
 template <class Container>
-void create_vector(const Container&c, vector<bool>&v, string s0, string s1, 
-		   string s2, string s3, string s4, string s5, string s6,
-		   string s7, string s8, string s9, string sa, string sb,
-		   string sc);
+void create_vector(const Container&c, std::vector<bool>&v, std::string s0, std::string s1, 
+		   std::string s2, std::string s3, std::string s4, std::string s5, std::string s6,
+		   std::string s7, std::string s8, std::string s9, std::string sa, std::string sb,
+		   std::string sc);
 
 //
 // value list
@@ -155,7 +155,7 @@
 template <class Seq, class Manip>
 inline
 value_list_b<Seq,Manip>
-value_list(const Seq &s, const char *d, Manip m, const vector<bool> &vb)
+value_list(const Seq &s, const char *d, Manip m, const std::vector<bool> &vb)
 {
   return value_list_b<Seq, Manip>(s, vb, d, m);
 }
@@ -167,7 +167,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return value_list_b<Seq, Manip>(s, vb, d, m);
 }
@@ -179,7 +179,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return value_list_b<Seq, do_nothing_type0> (s, vb, d, do_nothing);
 }
@@ -191,7 +191,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return value_list_b<Seq, do_nothing_type0> (s, vb, ",",do_nothing);
 }
@@ -220,7 +220,7 @@
 inline
 equal_list_b<Seq1, Seq2, Manip>
 equal_list(const Seq1 &s1, const Seq2 &s2, const char *d, const char *e, 
-	   Manip m, const vector<bool> &vb)
+	   Manip m, const std::vector<bool> &vb)
 {
   return equal_list_b<Seq1,Seq2,Manip>(s1, s2, vb, d, e, m);
 }
@@ -234,7 +234,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s1.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return equal_list_b<Seq1,Seq2,Manip>(s1, s2, vb, d, e, m);
 }
@@ -248,7 +248,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s1.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return equal_list_b<Seq1,Seq2,do_nothing_type0>
     (s1, s2, vb, d, e, do_nothing);
@@ -262,7 +262,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s1.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return equal_list_b<Seq1,Seq2,do_nothing_type0> 
     (s1, s2, vb, d, " = ", do_nothing);
@@ -276,7 +276,7 @@
 	   bool t5=false, bool t6=false, bool t7=false, bool t8=false,
 	   bool t9=false, bool ta=false, bool tb=false, bool tc=false)
 {
-  vector<bool> vb;
+  std::vector<bool> vb;
   create_vector(s1.size(), vb, t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,ta,tb,tc);
   return equal_list_b<Seq1,Seq2,do_nothing_type0> 
     (s1, s2, vb,"," ," = " ,do_nothing);
